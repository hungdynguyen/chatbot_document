import os
import uuid
from pathlib import Path
from typing import List, Dict

import uvicorn
from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field

# --- IMPORT C√ÅC UTILITY ---
# Gi·∫£ s·ª≠ b·∫°n c√≥ file config.py ƒë·ªÉ qu·∫£n l√Ω c√°c h·∫±ng s·ªë
from config import UPLOAD_DIRECTORY, origins 
# Import c√°c h√†m x·ª≠ l√Ω logic
from utils.extractor import extract_information_from_docs
from utils.rag_client import query_rag_flow
from utils.embedding_handler import embed_files_to_qdrant, qdrant_client 

# -------------------------------------------------------------
# 1. KH·ªûI T·∫†O APP V√Ä C·∫§U H√åNH
# -------------------------------------------------------------
app = FastAPI(title="Loan Assessment Backend")
os.makedirs(UPLOAD_DIRECTORY, exist_ok=True)

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# -------------------------------------------------------------
# 2. ƒê·ªäNH NGHƒ®A MODEL
# -------------------------------------------------------------
class ProcessRequest(BaseModel):
    prompt: str
    file_ids: List[str]

class RagRequest(BaseModel):
    question: str
    file_ids: List[str]
    chat_history: List[Dict[str, str]] = Field(default_factory=list)

# -------------------------------------------------------------
# 3. ENDPOINT UPLOAD 
# -------------------------------------------------------------
@app.post("/upload_file")
async def upload_file(file: UploadFile = File(...)):
    try:
        file_id = str(uuid.uuid4())
        file_extension = Path(file.filename).suffix
        new_filename = f"{file_id}{file_extension}"
        file_path = os.path.join(UPLOAD_DIRECTORY, new_filename)
        contents = await file.read()
        with open(file_path, "wb") as f:
            f.write(contents)
        print(f"‚úÖ File '{file.filename}' ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng v·ªõi t√™n '{new_filename}'")
        return {"file_id": file_id, "filename": new_filename}
    except Exception as e:
        print(f"‚ùå L·ªói khi upload file: {e}")
        raise HTTPException(status_code=500, detail="Kh√¥ng th·ªÉ upload file")


# -------------------------------------------------------------
# 4. ENDPOINT X·ª¨ L√ù TR√çCH XU·∫§T 
# -------------------------------------------------------------
@app.post("/process_prompt")
async def process_prompt(request: ProcessRequest):
    """
    Nh·∫≠n prompt v√† file_ids, th·ª±c hi·ªán embedding v√† tr√≠ch xu·∫•t th√¥ng tin.
    """
    num_files = len(request.file_ids)
    if num_files == 0:
        raise HTTPException(status_code=400, detail="Vui l√≤ng t·∫£i l√™n √≠t nh·∫•t m·ªôt file.")

    print(f"üöÄ Nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu x·ª≠ l√Ω cho {num_files} file v·ªõi prompt: '{request.prompt}'")
    print(f"   C√°c File ID: {request.file_ids}")

    collection_name = None
    try:
        # --- B∆Ø·ªöC 1: EMBEDDING C√ÅC FILE V·ª™A UPLOAD ---
        # H√†m n√†y s·∫Ω t·∫°o m·ªôt collection m·ªõi v√† tr·∫£ v·ªÅ t√™n c·ªßa n√≥
        collection_name = await embed_files_to_qdrant(request.file_ids)
        print(f"C√°c file ƒë√£ ƒë∆∞·ª£c embedding v√†o collection: {collection_name}")

        # --- B∆Ø·ªöC 2: G·ªåI H√ÄM X·ª¨ L√ù TR√çCH XU·∫§T V√Ä TRUY·ªÄN COLLECTION_NAME V√ÄO ---
        extracted_data = await extract_information_from_docs(
            prompt=request.prompt,
            file_ids=request.file_ids,
            collection_name=collection_name 
        )

        # Tr·∫£ v·ªÅ k·∫øt qu·∫£
        return {
            "summary": "Qu√° tr√¨nh tr√≠ch xu·∫•t th√¥ng tin ƒë√£ ho√†n t·∫•t.",
            "extracted_data": extracted_data,
            "prompt": request.prompt,
            "file_ids": request.file_ids,
        }
    except Exception as e:
        print(f"‚ùå L·ªói nghi√™m tr·ªçng trong qu√° tr√¨nh x·ª≠ l√Ω: {e}")
        # B·∫Øt l·ªói v√† tr·∫£ v·ªÅ l·ªói 500 cho frontend
        raise HTTPException(status_code=500, detail=f"L·ªói x·ª≠ l√Ω ph√≠a server: {e}")
    finally:
        # --- B∆Ø·ªöC 3: D·ªåN D·∫∏P (R·∫§T QUAN TR·ªåNG) ---
        # D√π th√†nh c√¥ng hay th·∫•t b·∫°i, c≈©ng x√≥a collection ƒë√£ t·∫°o cho phi√™n n√†y
        if collection_name:
            try:
                print(f"üßπ D·ªçn d·∫πp, x√≥a collection: {collection_name}")
                qdrant_client.delete_collection(collection_name=collection_name)
                print(f"‚úÖ Collection '{collection_name}' ƒë√£ ƒë∆∞·ª£c x√≥a.")
            except Exception as e:
                # Ghi l·∫°i l·ªói d·ªçn d·∫πp nh∆∞ng kh√¥ng raise exception ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn client
                print(f"‚ö†Ô∏è L·ªói khi d·ªçn d·∫πp collection '{collection_name}': {e}")


# -------------------------------------------------------------
# 5. ENDPOINT M·ªöI CHO CH·ª®C NƒÇNG CHAT RAG 
# -------------------------------------------------------------
@app.post("/chat_rag")
async def chat_rag(request: RagRequest):
    if not request.file_ids:
         raise HTTPException(status_code=400, detail="Vui l√≤ng cung c·∫•p file_ids ƒë·ªÉ th·ª±c hi·ªán RAG.")

    print(f"üó®Ô∏è Nh·∫≠n ƒë∆∞·ª£c c√¢u h·ªèi RAG: '{request.question}'")
    print(f"   Tr√™n c√°c File ID: {request.file_ids}")

    collection_name = None
    try:
        # B∆Ø·ªöC 1: EMBEDDING
        collection_name = await embed_files_to_qdrant(request.file_ids)
        print(f"‚≠êÔ∏è C√°c file cho RAG ƒë√£ ƒë∆∞·ª£c embedding v√†o collection: {collection_name}")

        # B∆Ø·ªöC 2: G·ªåI RAG FLOW V·ªöI COLLECTION_NAME ƒê·ªòNG
        # B·∫°n c·∫ßn c·∫≠p nh·∫≠t h√†m query_rag_flow ƒë·ªÉ nh·∫≠n collection_name
        answer = query_rag_flow(
            question=request.question,
            collection_name=collection_name, # <-- Truy·ªÅn collection_name
            file_ids=request.file_ids,
            chat_history=request.chat_history
        )
        return {"answer": answer}

    except Exception as e:
        print(f"‚ùå L·ªói trong qu√° tr√¨nh RAG: {e}")
        raise HTTPException(status_code=500, detail=f"L·ªói x·ª≠ l√Ω RAG: {e}")
    finally:
        # B∆Ø·ªöC 3: D·ªåN D·∫∏P
        if collection_name:
            try:
                print(f"üßπ D·ªçn d·∫πp RAG collection: {collection_name}")
                qdrant_client.delete_collection(collection_name=collection_name)
                print(f"‚úÖ RAG Collection '{collection_name}' ƒë√£ ƒë∆∞·ª£c x√≥a.")
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói khi d·ªçn d·∫πp RAG collection '{collection_name}': {e}")


# -------------------------------------------------------------
# 6. ƒêI·ªÇM B·∫ÆT ƒê·∫¶U
# -------------------------------------------------------------
if __name__ == "__main__":
    # B·∫°n c·∫ßn file config.py c√≥ ƒë·ªãnh nghƒ©a bi·∫øn 'origins'
    # v√≠ d·ª•: origins = ["http://localhost:3000"]
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)