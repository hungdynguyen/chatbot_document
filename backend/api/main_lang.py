import os
import uuid
from pathlib import Path
from typing import List, Dict, Optional

import uvicorn
from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field

# --- IMPORT C√ÅC UTILITY ---
# Gi·∫£ s·ª≠ b·∫°n c√≥ file config.py ƒë·ªÉ qu·∫£n l√Ω c√°c h·∫±ng s·ªë
from config import UPLOAD_DIRECTORY, origins 
# Import c√°c h√†m x·ª≠ l√Ω logic
from utils.extractor import extract_information_from_docs, load_template_schema
from utils.rag_client import query_rag_flow
from utils.embedding_handler_lang import embed_files_to_qdrant, qdrant_client 

# -------------------------------------------------------------
# 1. KH·ªûI T·∫†O APP V√Ä C·∫§U H√åNH
# -------------------------------------------------------------
app = FastAPI(title="Loan Assessment Backend")
os.makedirs(UPLOAD_DIRECTORY, exist_ok=True)

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# -------------------------------------------------------------
# 2. ƒê·ªäNH NGHƒ®A MODEL
# -------------------------------------------------------------
class ProcessRequest(BaseModel):
    prompt: str
    file_ids: List[str]
    template_id: str = "template1" # Th√™m template_id, m·∫∑c ƒë·ªãnh l√† template1

class RagRequest(BaseModel):
    question: str
    file_ids: List[str]
    collection_name: Optional[str] = None
    chat_history: List[Dict[str, str]] = Field(default_factory=list)

# -------------------------------------------------------------
# 3. ENDPOINT UPLOAD 
# -------------------------------------------------------------
@app.post("/upload_file")
async def upload_file(file: UploadFile = File(...)):
    try:
        file_id = str(uuid.uuid4())
        file_extension = Path(file.filename).suffix
        new_filename = f"{file_id}{file_extension}"
        file_path = os.path.join(UPLOAD_DIRECTORY, new_filename)
        contents = await file.read()
        with open(file_path, "wb") as f:
            f.write(contents)
        print(f"‚úÖ File '{file.filename}' ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng v·ªõi t√™n '{new_filename}'")
        return {"file_id": file_id, "filename": new_filename}
    except Exception as e:
        print(f"‚ùå L·ªói khi upload file: {e}")
        raise HTTPException(status_code=500, detail="Kh√¥ng th·ªÉ upload file")


# -------------------------------------------------------------
# 4. ENDPOINT X·ª¨ L√ù TR√çCH XU·∫§T 
# -------------------------------------------------------------
@app.post("/process_prompt")
async def process_prompt(request: ProcessRequest):
    """
    Nh·∫≠n prompt, file_ids v√† template_id, th·ª±c hi·ªán embedding v√† tr√≠ch xu·∫•t th√¥ng tin.
    """
    num_files = len(request.file_ids)
    if num_files == 0:
        raise HTTPException(status_code=400, detail="Vui l√≤ng t·∫£i l√™n √≠t nh·∫•t m·ªôt file.")

    print(f"üöÄ Nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu x·ª≠ l√Ω cho {num_files} file v·ªõi prompt: '{request.prompt}' v√† template: '{request.template_id}'")
    print(f"   C√°c File ID: {request.file_ids}")

    collection_name = None
    try:
        # --- B∆Ø·ªöC 1: EMBEDDING C√ÅC FILE V·ª™A UPLOAD ---
        # H√†m n√†y s·∫Ω t·∫°o m·ªôt collection m·ªõi v√† tr·∫£ v·ªÅ t√™n c·ªßa n√≥
        collection_name = await embed_files_to_qdrant(request.file_ids)
        print(f"C√°c file ƒë√£ ƒë∆∞·ª£c embedding v√†o collection: {collection_name}")

        # --- B∆Ø·ªöC 2: G·ªåI H√ÄM X·ª¨ L√ù TR√çCH XU·∫§T V√Ä TRUY·ªÄN COLLECTION_NAME V√ÄO ---
        extracted_data = await extract_information_from_docs(
            prompt=request.prompt,
            file_ids=request.file_ids,
            collection_name=collection_name,
            template_id=request.template_id
        )

        # Tr·∫£ v·ªÅ k·∫øt qu·∫£, bao g·ªìm c·∫£ collection_name ƒë·ªÉ client c√≥ th·ªÉ d√πng cho chat
        return {
            "summary": "Qu√° tr√¨nh tr√≠ch xu·∫•t th√¥ng tin ƒë√£ ho√†n t·∫•t.",
            "extracted_data": extracted_data,
            "prompt": request.prompt,
            "file_ids": request.file_ids,
            "collection_name": collection_name,
        }
    except Exception as e:
        print(f"‚ùå L·ªói nghi√™m tr·ªçng trong qu√° tr√¨nh x·ª≠ l√Ω: {e}")
        # N·∫øu c√≥ l·ªói, v√† ƒë√£ t·∫°o collection, h√£y x√≥a n√≥ ƒëi
        if collection_name:
            try:
                print(f"üßπ D·ªçn d·∫πp collection '{collection_name}' do c√≥ l·ªói x·∫£y ra...")
                qdrant_client.delete_collection(collection_name=collection_name)
                print(f"‚úÖ ƒê√£ x√≥a collection '{collection_name}' do l·ªói.")
            except Exception as cleanup_e:
                print(f"‚ö†Ô∏è L·ªói khi d·ªçn d·∫πp collection '{collection_name}' sau l·ªói ch√≠nh: {cleanup_e}")
        # B·∫Øt l·ªói v√† tr·∫£ v·ªÅ l·ªói 500 cho frontend
        raise HTTPException(status_code=500, detail=f"L·ªói x·ª≠ l√Ω ph√≠a server: {e}")
    # B·ªè kh·ªëi finally ƒëi ƒë·ªÉ tr√°nh x√≥a collection ngay l·∫≠p t·ª©c


# -------------------------------------------------------------
# 5. ENDPOINT M·ªöI CHO CH·ª®C NƒÇNG CHAT RAG (ƒê√É T·ªêI ∆ØU)
# -------------------------------------------------------------
@app.post("/chat_rag")
async def chat_rag(request: RagRequest):
    if not request.file_ids:
        raise HTTPException(status_code=400, detail="Vui l√≤ng cung c·∫•p file_ids ƒë·ªÉ th·ª±c hi·ªán RAG.")

    print(f"üó®Ô∏è Nh·∫≠n ƒë∆∞·ª£c c√¢u h·ªèi RAG: '{request.question}'")
    
    collection_name = request.collection_name
    new_collection_created = False

    try:
        # N·∫øu kh√¥ng c√≥ collection_name, ho·∫∑c c√≥ nh∆∞ng kh√¥ng t·ªìn t·∫°i tr√™n server, t·∫°o m·ªõi
        if not collection_name:
            print("Kh√¥ng c√≥ collection_name, s·∫Ω t·∫°o collection m·ªõi...")
            collection_name = await embed_files_to_qdrant(request.file_ids)
            new_collection_created = True
            print(f"‚≠êÔ∏è C√°c file cho RAG ƒë√£ ƒë∆∞·ª£c embedding v√†o collection m·ªõi: {collection_name}")
        else:
            # Ki·ªÉm tra xem collection c√≥ th·ª±c s·ª± t·ªìn t·∫°i kh√¥ng
            try:
                # C√°ch ƒë∆°n gi·∫£n ƒë·ªÉ ki·ªÉm tra l√† th·ª≠ l·∫•y th√¥ng tin collection
                qdrant_client.get_collection(collection_name=collection_name)
                print(f"üîÑ S·ª≠ d·ª•ng l·∫°i collection ƒë√£ c√≥: {collection_name}")
            except Exception:
                # N·∫øu kh√¥ng t√¨m th·∫•y, c√≥ th·ªÉ collection ƒë√£ b·ªã x√≥a do timeout, t·∫°o l·∫°i
                print(f"‚ö†Ô∏è Collection '{collection_name}' kh√¥ng t·ªìn t·∫°i. S·∫Ω t·∫°o l·∫°i...")
                collection_name = await embed_files_to_qdrant(request.file_ids)
                new_collection_created = True
                print(f"‚≠êÔ∏è ƒê√£ t·∫°o l·∫°i collection: {collection_name}")

        # B∆Ø·ªöC 2: G·ªåI RAG FLOW V·ªöI COLLECTION_NAME
        answer = query_rag_flow(
            question=request.question,
            collection_name=collection_name,
            file_ids=request.file_ids,
            chat_history=request.chat_history
        )
        
        response_data = {"answer": answer}
        # N·∫øu m·ªôt collection m·ªõi ƒë∆∞·ª£c t·∫°o, tr·∫£ v·ªÅ t√™n c·ªßa n√≥ cho client
        if new_collection_created:
            response_data["collection_name"] = collection_name
            
        return response_data

    except Exception as e:
        print(f"‚ùå L·ªói trong qu√° tr√¨nh RAG: {e}")
        # N·∫øu l·ªói x·∫£y ra v√† ch√∫ng ta ƒë√£ t·∫°o collection m·ªõi, h√£y d·ªçn d·∫πp n√≥
        if new_collection_created and collection_name:
            print(f"üßπ D·ªçn d·∫πp collection '{collection_name}' do c√≥ l·ªói x·∫£y ra...")
            try:
                qdrant_client.delete_collection(collection_name=collection_name)
                print(f"‚úÖ ƒê√£ x√≥a collection '{collection_name}' do l·ªói.")
            except Exception as cleanup_e:
                print(f"‚ö†Ô∏è L·ªói khi d·ªçn d·∫πp collection '{collection_name}' sau l·ªói ch√≠nh: {cleanup_e}")
        
        raise HTTPException(status_code=500, detail=f"L·ªói x·ª≠ l√Ω RAG: {e}")


# -------------------------------------------------------------
# 6. ENDPOINT D·ªåN D·∫∏P SESSION
# -------------------------------------------------------------
class ClearSessionRequest(BaseModel):
    collection_name: str

@app.post("/clear_rag_session")
async def clear_rag_session(request: ClearSessionRequest):
    collection_name = request.collection_name
    if not collection_name:
        raise HTTPException(status_code=400, detail="Vui l√≤ng cung c·∫•p collection_name.")
    
    try:
        print(f"üßπ Nh·∫≠n y√™u c·∫ßu d·ªçn d·∫πp RAG collection: {collection_name}")
        # Th·ª≠ x√≥a collection
        qdrant_client.delete_collection(collection_name=collection_name)
        print(f"‚úÖ RAG Collection '{collection_name}' ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.")
        return {"status": "success", "message": f"Collection '{collection_name}' ƒë√£ ƒë∆∞·ª£c x√≥a."}
    except Exception as e:
        # L·ªói c√≥ th·ªÉ x·∫£y ra n·∫øu collection kh√¥ng t·ªìn t·∫°i, ho·∫∑c do v·∫•n ƒë·ªÅ k·∫øt n·ªëi
        # Trong tr∆∞·ªùng h·ª£p kh√¥ng t√¨m th·∫•y, coi nh∆∞ ƒë√£ th√†nh c√¥ng
        if "not found" in str(e).lower() or "doesn't exist" in str(e).lower():
            print(f"‚ÑπÔ∏è Collection '{collection_name}' kh√¥ng t√¨m th·∫•y, c√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c x√≥a tr∆∞·ªõc ƒë√≥.")
            return {"status": "not_found", "message": f"Collection '{collection_name}' kh√¥ng t√¨m th·∫•y."}
        
        print(f"‚ö†Ô∏è L·ªói khi d·ªçn d·∫πp RAG collection '{collection_name}': {e}")
        raise HTTPException(status_code=500, detail=f"L·ªói khi x√≥a collection: {e}")


# -------------------------------------------------------------
# 7. ENDPOINT L·∫§Y DANH S√ÅCH TEMPLATES
# -------------------------------------------------------------
@app.get("/templates")
async def get_templates():
    """
    Tr·∫£ v·ªÅ danh s√°ch c√°c template c√≥ s·∫µn trong h·ªá th·ªëng.
    """
    try:
        import glob
        schemas_dir = os.path.join(os.path.dirname(__file__), "..", "utils", "..", "schemas")
        schema_files = glob.glob(os.path.join(schemas_dir, "*.json"))
        
        templates = []
        for schema_file in schema_files:
            try:
                schema = load_template_schema(os.path.basename(schema_file).replace('.json', ''))
                templates.append({
                    "template_id": schema.get("template_id"),
                    "template_name": schema.get("template_name"),
                    "description": schema.get("description")
                })
            except Exception as e:
                print(f"L·ªói khi ƒë·ªçc schema {schema_file}: {e}")
                continue
        
        return {"templates": templates}
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y danh s√°ch templates: {e}")
        raise HTTPException(status_code=500, detail=f"L·ªói khi l·∫•y danh s√°ch templates: {e}")


# -------------------------------------------------------------
# 8. ƒêI·ªÇM B·∫ÆT ƒê·∫¶U
# -------------------------------------------------------------
if __name__ == "__main__":
    # B·∫°n c·∫ßn file config.py c√≥ ƒë·ªãnh nghƒ©a bi·∫øn 'origins'
    # v√≠ d·ª•: origins = ["http://localhost:3000"]
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)