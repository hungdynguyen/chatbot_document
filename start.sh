#!/bin/bash

# =============================================================================
# Script kh·ªüi ƒë·ªông to√†n b·ªô h·ªá th·ªëng Loan Assessment
# =============================================================================

# M√†u s·∫Øc cho output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Th∆∞ m·ª•c g·ªëc c·ªßa project
PROJECT_ROOT="/root/chatbot"
FRONTEND_DIR="$PROJECT_ROOT/frontend"
BACKEND_DIR="$PROJECT_ROOT/backend"

# H√†m ƒë·ªÉ in log v·ªõi m√†u s·∫Øc
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# H√†m ki·ªÉm tra port c√≥ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng kh√¥ng
# S·ª≠ d·ª•ng /dev/tcp c·ªßa bash ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi, ƒë√°ng tin c·∫≠y h∆°n lsof v·ªõi Docker.
check_port() {
    local port=$1
    # S·ª≠ d·ª•ng netcat (nc) ƒë·ªÉ ki·ªÉm tra c·ªïng. T√πy ch·ªçn -z y√™u c·∫ßu nc
    # qu√©t c√°c c·ªïng ƒëang l·∫Øng nghe m√† kh√¥ng g·ª≠i b·∫•t k·ª≥ d·ªØ li·ªáu n√†o.
    # ƒê√¢y l√† ph∆∞∆°ng ph√°p ƒë√°ng tin c·∫≠y nh·∫•t.
    if command -v nc >/dev/null 2>&1; then
        nc -z 127.0.0.1 $port
        return $?
    else
        # N·∫øu kh√¥ng c√≥ nc, quay l·∫°i s·ª≠ d·ª•ng /dev/tcp c·ªßa bash
        (echo > /dev/tcp/127.0.0.1/$port) >/dev/null 2>&1
        return $?
    fi
}

# H√†m d·ª´ng process ƒëang ch·∫°y tr√™n port
kill_port() {
    local port=$1
    local pid=$(lsof -ti:$port)
    if [ ! -z "$pid" ]; then
        log_warning "D·ª´ng process ƒëang ch·∫°y tr√™n port $port (PID: $pid)"
        kill -9 $pid 2>/dev/null
        sleep 2
    fi
}

# H√†m ki·ªÉm tra Docker c√≥ ƒëang ch·∫°y kh√¥ng
check_docker() {
    if ! docker info >/dev/null 2>&1; then
        log_error "Docker kh√¥ng ƒë∆∞·ª£c kh·ªüi ƒë·ªông. Vui l√≤ng kh·ªüi ƒë·ªông Docker tr∆∞·ªõc."
        exit 1
    fi
    log_success "Docker ƒë√£ s·∫µn s√†ng"
}

# H√†m t·∫°o network backend n·∫øu ch∆∞a c√≥
create_network() {
    if ! docker network inspect backend >/dev/null 2>&1; then
        log_info "T·∫°o Docker network 'backend'..."
        docker network create backend
        log_success "ƒê√£ t·∫°o network 'backend'"
    else
        log_info "Network 'backend' ƒë√£ t·ªìn t·∫°i"
    fi
}

# =============================================================================
# MAIN SCRIPT
# =============================================================================

clear
echo "========================================================================="
echo "                    KH·ªûI ƒê·ªòNG H·ªÜ TH·ªêNG LOAN ASSESSMENT                 "
echo "========================================================================="
echo ""

# Chuy·ªÉn v·ªÅ th∆∞ m·ª•c project
cd "$PROJECT_ROOT" || {
    log_error "Kh√¥ng th·ªÉ chuy·ªÉn ƒë·∫øn th∆∞ m·ª•c project: $PROJECT_ROOT"
    exit 1
}

# 1. Ki·ªÉm tra Docker
log_info "Ki·ªÉm tra Docker..."
check_docker

# 2. T·∫°o network Docker
create_network

# 3. D·ª´ng c√°c service c≈© n·∫øu c√≥
log_info "D·ª´ng c√°c service c≈© n·∫øu c√≥..."
kill_port 6333  # Qdrant
kill_port 8080  # Text Embeddings Router
kill_port 9200  # Prometheus port for embeddings router
kill_port 8000  # FastAPI Backend
kill_port 3002  # Frontend Docker
kill_port 7860  # Langflow (n·∫øu c√≥)

# D·ª´ng containers c≈©
docker-compose -f frontend/docker-compose.yml down 2>/dev/null
docker stop qdrant-container 2>/dev/null
docker rm qdrant-container 2>/dev/null

log_success "ƒê√£ d·ªçn d·∫πp c√°c service c≈©"

# 4. Kh·ªüi ƒë·ªông Qdrant
log_info "Kh·ªüi ƒë·ªông Qdrant Vector Database..."
docker run -d \
    --name qdrant-container \
    --network backend \
    -p 6333:6333 \
    -p 6334:6334 \
    -v "$(pwd)/qdrant_storage:/qdrant/storage:z" \
    qdrant/qdrant

if [ $? -eq 0 ]; then
    log_success "Qdrant ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng tr√™n port 6333"
else
    log_error "Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông Qdrant"
    exit 1
fi

# ƒê·ª£i Qdrant kh·ªüi ƒë·ªông ho√†n to√†n
log_info "ƒê·ª£i Qdrant kh·ªüi ƒë·ªông ho√†n to√†n..."
sleep 5

# 5. Kh·ªüi ƒë·ªông Text Embeddings Router
log_info "Kh·ªüi ƒë·ªông Text Embeddings Router..."
if [ -f "$HOME/.cargo/bin/text-embeddings-router" ]; then
    nohup ~/.cargo/bin/text-embeddings-router \
        --model-id sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2 \
        --port 8080 \
        --prometheus-port 9200 \
        > text-embeddings.log 2>&1 &
    
    # ƒê·ª£i router kh·ªüi ƒë·ªông, c√≥ th·ªÉ m·∫•t th·ªùi gian t·∫£i model
    log_info "ƒê·ª£i Text Embeddings Router kh·ªüi ƒë·ªông... (t·ªëi ƒëa 90 gi√¢y)"
    ATTEMPTS=0
    MAX_ATTEMPTS=24 # 18 l·∫ßn * 5 gi√¢y = 90 gi√¢y
    while ! check_port 8080 && [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
        ATTEMPTS=$((ATTEMPTS + 1))
        sleep 5
        echo -n "."
    done
    echo ""

    if check_port 8080; then
        log_success "Text Embeddings Router ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng tr√™n port 8080"
    else
        log_error "Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông Text Embeddings Router. Ki·ªÉm tra log t·∫°i text-embeddings.log"
        exit 1
    fi
else
    log_warning "Text Embeddings Router kh√¥ng t√¨m th·∫•y t·∫°i ~/.cargo/bin/text-embeddings-router"
    log_info "B·ªè qua Text Embeddings Router..."
fi

# 6. Kh·ªüi ƒë·ªông Backend API (FastAPI) trong m√¥i tr∆∞·ªùng Conda
log_info "Kh·ªüi ƒë·ªông Backend API (FastAPI)..."
(
    # Ch·∫°y trong m·ªôt subshell ƒë·ªÉ ƒë·∫£m b·∫£o m√¥i tr∆∞·ªùng ƒë∆∞·ª£c k√≠ch ho·∫°t ƒë√∫ng c√°ch
    log_info "K√≠ch ho·∫°t m√¥i tr∆∞·ªùng Conda 'chatbot_env' cho backend..."
    # S·ª≠ d·ª•ng '.' thay cho 'source' ƒë·ªÉ t∆∞∆°ng th√≠ch t·ªët h∆°n
    . /root/miniconda3/etc/profile.d/conda.sh
    conda activate chatbot_env
    
    # Chuy·ªÉn v√†o th∆∞ m·ª•c backend
    cd "$BACKEND_DIR" || exit 1
    
    # Kh·ªüi ƒë·ªông FastAPI
    nohup uvicorn api.main:app --reload --host 0.0.0.0 --port 8000 > ../backend.log 2>&1 &
)

# ƒê·ª£i Backend API kh·ªüi ƒë·ªông v·ªõi c∆° ch·∫ø ki·ªÉm tra l·∫∑p l·∫°i
log_info "ƒê·ª£i Backend API kh·ªüi ƒë·ªông... (t·ªëi ƒëa 60 gi√¢y)"
ATTEMPTS=0
MAX_ATTEMPTS=12 # 12 l·∫ßn * 5 gi√¢y = 60 gi√¢y
while ! check_port 8000 && [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
    ATTEMPTS=$((ATTEMPTS + 1))
    sleep 5
    echo -n "."
done
echo ""

if check_port 8000; then
    log_success "Backend API ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng tr√™n port 8000"
else
    log_error "Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông Backend API. Ki·ªÉm tra log t·∫°i backend.log"
    exit 1
fi

# 7. Kh·ªüi ƒë·ªông Langflow
log_info "Kh·ªüi ƒë·ªông Langflow..."
(
    # Ch·∫°y trong m·ªôt subshell ƒë·ªÉ ƒë·∫£m b·∫£o m√¥i tr∆∞·ªùng ƒë∆∞·ª£c k√≠ch ho·∫°t ƒë√∫ng c√°ch
    log_info "K√≠ch ho·∫°t m√¥i tr∆∞·ªùng Conda 'chatbot_env' cho Langflow..."
    . /root/miniconda3/etc/profile.d/conda.sh
    conda activate chatbot_env
    
    # Chuy·ªÉn v·ªÅ th∆∞ m·ª•c project ƒë·ªÉ file log ƒë∆∞·ª£c t·∫°o ƒë√∫ng ch·ªó
    cd "$PROJECT_ROOT" || exit 1
    
    # Kh·ªüi ƒë·ªông Langflow b·∫±ng uv run
    nohup uv run langflow run --host 0.0.0.0 --port 7860 > langflow.log 2>&1 &
)

# ƒê·ª£i Langflow kh·ªüi ƒë·ªông v·ªõi c∆° ch·∫ø ki·ªÉm tra l·∫∑p l·∫°i
log_info "ƒê·ª£i Langflow kh·ªüi ƒë·ªông... (t·ªëi ƒëa 60 gi√¢y)"
ATTEMPTS=0
MAX_ATTEMPTS=12 # 12 l·∫ßn * 5 gi√¢y = 60 gi√¢y
while ! check_port 7860 && [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
    ATTEMPTS=$((ATTEMPTS + 1))
    sleep 5
    echo -n "."
done
echo ""

if check_port 7860; then
    log_success "Langflow ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng tr√™n port 7860"
else
    log_error "Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông Langflow. Ki·ªÉm tra log t·∫°i langflow.log"
    # Kh√¥ng tho√°t script, ch·ªâ c·∫£nh b√°o v√¨ Langflow c√≥ th·ªÉ kh√¥ng ph·∫£i l√∫c n√†o c≈©ng c·∫ßn thi·∫øt
fi


# 8. Kh·ªüi ƒë·ªông Frontend (Next.js v·ªõi Docker)
log_info "Kh·ªüi ƒë·ªông Frontend (Next.js v·ªõi Docker)..."
cd "$FRONTEND_DIR" || {
    log_error "Kh√¥ng th·ªÉ chuy·ªÉn ƒë·∫øn th∆∞ m·ª•c frontend: $FRONTEND_DIR"
    exit 1
}

# Build v√† kh·ªüi ƒë·ªông frontend container
docker compose up -d 

# Thay v√¨ ƒë·ª£i c·ªë ƒë·ªãnh, ch√∫ng ta s·∫Ω l·∫∑p v√† ki·ªÉm tra trong t·ªëi ƒëa 2 ph√∫t
log_info "ƒê·ª£i Frontend kh·ªüi ƒë·ªông... (t·ªëi ƒëa 120 gi√¢y)"
ATTEMPTS=0
MAX_ATTEMPTS=24 # 24 l·∫ßn * 5 gi√¢y = 120 gi√¢y
while ! check_port 3002 && [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
    ATTEMPTS=$((ATTEMPTS + 1))
    sleep 5
    echo -n "."
done
echo "" # Xu·ªëng d√≤ng sau khi c√°c d·∫•u ch·∫•m k·∫øt th√∫c

if check_port 3002; then
    log_success "Frontend ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng tr√™n port 3002"
else
    log_error "Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông Frontend"
    exit 1
fi

# 9. Hi·ªÉn th·ªã th√¥ng tin t·ªïng k·∫øt
echo "========================================================================="
echo "                          KH·ªûI ƒê·ªòNG HO√ÄN T·∫§T                           "
echo "========================================================================="
echo ""
log_success "T·∫•t c·∫£ service ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông th√†nh c√¥ng!"
echo ""
echo "üìä TH√îNG TIN C√ÅC SERVICE:"
echo "  ‚Ä¢ Qdrant Vector DB:        http://localhost:6333"
echo "  ‚Ä¢ Text Embeddings Router:  http://localhost:8080  (n·∫øu c√≥)"
echo "  ‚Ä¢ Backend API:             http://localhost:8000"
echo "  ‚Ä¢ Frontend App:            http://localhost:3002"
echo "  ‚Ä¢ Langflow:                http://localhost:7860"
echo ""
echo "üìù LOG FILES:"
echo "  ‚Ä¢ Text Embeddings:         $PROJECT_ROOT/text-embeddings.log"
echo "  ‚Ä¢ Backend API:             $PROJECT_ROOT/backend.log"
echo "  ‚Ä¢ Langflow:                $PROJECT_ROOT/langflow.log"
echo "  ‚Ä¢ Frontend Docker:         docker-compose logs"
echo ""
echo "üîß L·ªÜNH H·ªÆU √çCH:"
echo "  ‚Ä¢ Xem log backend:         tail -f $PROJECT_ROOT/backend.log"
echo "  ‚Ä¢ Xem log langflow:        tail -f $PROJECT_ROOT/langflow.log"
echo "  ‚Ä¢ Xem log frontend:        docker-compose -f $FRONTEND_DIR/docker-compose.yml logs -f"
echo "  ‚Ä¢ D·ª´ng t·∫•t c·∫£:             ./stop.sh"
echo ""
log_info "H·ªá th·ªëng ƒë√£ s·∫µn s√†ng s·ª≠ d·ª•ng!"
